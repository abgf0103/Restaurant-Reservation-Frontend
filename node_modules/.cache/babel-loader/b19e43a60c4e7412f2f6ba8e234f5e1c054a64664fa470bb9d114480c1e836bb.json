{"ast":null,"code":"var _jsxFileName = \"C:\\\\kh_final_react\\\\src\\\\components\\\\RequireAuth.js\",\n  _s = $RefreshSig$();\nimport { useSelector } from \"react-redux\";\nimport { getUserInfo } from \"../hooks/userSlice\";\nimport { Navigate, Outlet, useLocation } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RequireAuth = ({\n  allowedRoles\n}) => {\n  _s();\n  const userInfo = useSelector(getUserInfo);\n  const location = useLocation();\n\n  // 사용자 정보가 없으면 로그인 페이지로 리다이렉트\n  if (!(userInfo !== null && userInfo !== void 0 && userInfo.username)) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/user/login\",\n      state: {\n        from: location\n      },\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 16\n    }, this);\n  }\n\n  // 사용자가 허용된 역할이 있을 경우만 Outlet을 렌더링\n  return (allowedRoles ? allowedRoles.includes(userInfo.roles) || userInfo.roles === \"admin\" : true) ?\n  /*#__PURE__*/\n  // roles 검사를 하지 않으면 모든 로그인된 사용자는 접근 가능\n  _jsxDEV(Outlet, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/unauth\",\n    replace: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this);\n};\n_s(RequireAuth, \"Yb7YLAashHzg2EQysacoTLuGlAc=\", false, function () {\n  return [useSelector, useLocation];\n});\n_c = RequireAuth;\nexport default RequireAuth;\nvar _c;\n$RefreshReg$(_c, \"RequireAuth\");","map":{"version":3,"names":["useSelector","getUserInfo","Navigate","Outlet","useLocation","jsxDEV","_jsxDEV","RequireAuth","allowedRoles","_s","userInfo","location","username","to","state","from","replace","fileName","_jsxFileName","lineNumber","columnNumber","includes","roles","_c","$RefreshReg$"],"sources":["C:/kh_final_react/src/components/RequireAuth.js"],"sourcesContent":["import { useSelector } from \"react-redux\";\r\nimport { getUserInfo } from \"../hooks/userSlice\";\r\nimport { Navigate, Outlet, useLocation } from \"react-router-dom\";\r\n\r\nconst RequireAuth = ({ allowedRoles }) => {\r\n    const userInfo = useSelector(getUserInfo);\r\n    const location = useLocation();\r\n\r\n    // 사용자 정보가 없으면 로그인 페이지로 리다이렉트\r\n    if (!userInfo?.username) {\r\n        return <Navigate to=\"/user/login\" state={{ from: location }} replace />;\r\n    }\r\n\r\n    // 사용자가 허용된 역할이 있을 경우만 Outlet을 렌더링\r\n    return (allowedRoles ? allowedRoles.includes(userInfo.roles) || userInfo.roles === \"admin\" : true) ? (\r\n        // roles 검사를 하지 않으면 모든 로그인된 사용자는 접근 가능\r\n        <Outlet />\r\n    ) : (\r\n        <Navigate to=\"/unauth\" replace />\r\n    );\r\n};\r\n\r\nexport default RequireAuth;\r\n"],"mappings":";;AAAA,SAASA,WAAW,QAAQ,aAAa;AACzC,SAASC,WAAW,QAAQ,oBAAoB;AAChD,SAASC,QAAQ,EAAEC,MAAM,EAAEC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjE,MAAMC,WAAW,GAAGA,CAAC;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EACtC,MAAMC,QAAQ,GAAGV,WAAW,CAACC,WAAW,CAAC;EACzC,MAAMU,QAAQ,GAAGP,WAAW,CAAC,CAAC;;EAE9B;EACA,IAAI,EAACM,QAAQ,aAARA,QAAQ,eAARA,QAAQ,CAAEE,QAAQ,GAAE;IACrB,oBAAON,OAAA,CAACJ,QAAQ;MAACW,EAAE,EAAC,aAAa;MAACC,KAAK,EAAE;QAAEC,IAAI,EAAEJ;MAAS,CAAE;MAACK,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC3E;;EAEA;EACA,OAAO,CAACZ,YAAY,GAAGA,YAAY,CAACa,QAAQ,CAACX,QAAQ,CAACY,KAAK,CAAC,IAAIZ,QAAQ,CAACY,KAAK,KAAK,OAAO,GAAG,IAAI;EAAA;EAC7F;EACAhB,OAAA,CAACH,MAAM;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,gBAEVd,OAAA,CAACJ,QAAQ;IAACW,EAAE,EAAC,SAAS;IAACG,OAAO;EAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CACnC;AACL,CAAC;AAACX,EAAA,CAhBIF,WAAW;EAAA,QACIP,WAAW,EACXI,WAAW;AAAA;AAAAmB,EAAA,GAF1BhB,WAAW;AAkBjB,eAAeA,WAAW;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}