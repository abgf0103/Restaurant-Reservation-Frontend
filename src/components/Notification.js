import React, { useState, useEffect, useRef } from "react";
import { useNavigate } from "react-router-dom";
import { useSelector } from "react-redux";
import { getUserInfo } from "../hooks/userSlice";
import Swal from "sweetalert2";
import instance from "./../api/instance";
import { Dropdown, Badge, Button } from "react-bootstrap";
import { Link } from "react-router-dom";
import "../css/Style.css";

const Notification = () => {
    const navigate = useNavigate();
    const userInfo = useSelector(getUserInfo) || {}; // Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï
    const [notifications, setNotifications] = useState([]);
    const [isDropdownOpen, setIsDropdownOpen] = useState(false);
    const dropdownRef = useRef(null);

    // Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú Ï≤¥ÌÅ¨
    useEffect(() => {
        if (!userInfo || !userInfo.username) {
            navigate("/user/login");
        }
    }, [navigate, userInfo]);

    // ÏÇ¨Ïö©Ïûê ÏïåÎ¶º Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
    const getUserNotifications = () => {
        instance
            .get(`/notifications/user`)
            .then((res) => {
                setNotifications(res.data);
            })
            .catch((error) => {
                console.error("ÏïåÎ¶º Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:", error);
                Swal.fire("Ïã§Ìå®", "ÏïåÎ¶º Î™©Î°ùÏùÑ Í∞ÄÏ†∏Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.", "error");
            });
    };

    useEffect(() => {
        getUserNotifications();
    }, []);

    // ÎìúÎ°≠Îã§Ïö¥ Ïô∏Î∂Ä ÌÅ¥Î¶≠ Í∞êÏßÄÌïòÏó¨ Îã´Í∏∞
    useEffect(() => {
        const handleClickOutside = (event) => {
            if (
                dropdownRef.current &&
                !dropdownRef.current.contains(event.target) &&
                event.target.id !== "btn-all-delete"
            ) {
                setIsDropdownOpen(false);
            }
        };

        if (isDropdownOpen) {
            document.addEventListener("mousedown", handleClickOutside);
        } else {
            document.removeEventListener("mousedown", handleClickOutside);
        }

        return () => {
            document.removeEventListener("mousedown", handleClickOutside);
        };
    }, [isDropdownOpen]);

    // ÏïåÎ¶º ÏÇ≠Ï†ú
    const handleDeleteNotification = (notificationId) => {
        Swal.fire({
            title: "ÏïåÎ¶ºÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?",
            text: "ÏÇ≠Ï†úÎêú ÏïåÎ¶ºÏùÄ Î≥µÍµ¨Ìï† Ïàò ÏóÜÏäµÎãàÎã§",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#d33",
            confirmButtonText: "ÏÇ≠Ï†ú",
            cancelButtonText: "Ï∑®ÏÜå",
        }).then((result) => {
            if (result.isConfirmed) {
                instance
                    .delete(`/notifications/delete/${notificationId}`)
                    .then(() => {
                        Swal.fire("ÏÑ±Í≥µ", "ÏïåÎ¶ºÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.", "success");
                        setNotifications((prevNotifications) =>
                            prevNotifications.filter((notification) => notification.notificationId !== notificationId)
                        );
                    })
                    .catch((error) => {
                        console.error("ÏïåÎ¶º ÏÇ≠Ï†ú Ïã§Ìå®:", error);
                        Swal.fire("Ïã§Ìå®", "ÏïåÎ¶º ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.", "error");
                    });
            }
        });
    };

    // Î™®Îì† ÏïåÎ¶º ÏÇ≠Ï†ú
    const handleDeleteAllNotifications = () => {
        const userId = userInfo.userId || userInfo.id;
        if (!userId) {
            console.error("User ID is undefined. Cannot proceed with deletion.");
            return;
        }

        Swal.fire({
            title: "Î™®Îì† ÏïåÎ¶ºÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?",
            text: "ÏÇ≠Ï†úÎêú ÏïåÎ¶ºÏùÄ Î≥µÍµ¨Ìï† Ïàò ÏóÜÏäµÎãàÎã§",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#d33",
            confirmButtonText: "ÏÇ≠Ï†ú",
            cancelButtonText: "Ï∑®ÏÜå",
        }).then((result) => {
            if (result.isConfirmed) {
                instance
                    .delete(`/notifications/user/delete/${userId}`)
                    .then(() => {
                        Swal.fire("ÏÑ±Í≥µ", "Î™®Îì† ÏïåÎ¶ºÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.", "success");
                        setNotifications([]);
                    })
                    .catch((error) => {
                        console.error("Î™®Îì† ÏïåÎ¶º ÏÇ≠Ï†ú Ïã§Ìå®:", error);
                        Swal.fire("Ïã§Ìå®", "Î™®Îì† ÏïåÎ¶º ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.", "error");
                    });
            }
        });
    };

    // ÎìúÎ°≠Îã§Ïö¥ ÎÇ¥Î∂Ä ÌÅ¥Î¶≠ Ïãú Ïù¥Î≤§Ìä∏ Ï†ÑÌåå Î∞©ÏßÄ (ÎìúÎ°≠Îã§Ïö¥ Îã´ÌûàÎäî Í≤É Î∞©ÏßÄ)
    const handleDropdownClick = (event) => {
        event.stopPropagation();
    };

    const goToMyReserve = () => {
        navigate("/user/myreserve");
    };

    return (
        <div ref={dropdownRef}>
            <Dropdown
                show={isDropdownOpen}
                onToggle={() => setIsDropdownOpen(!isDropdownOpen)}
                id="notification-dropdown"
            >
                <Dropdown.Toggle id="notification-dropdown-toggle">
                    üîî
                    {notifications.length > 0 && (
                        <Badge pill bg="danger">
                            {notifications.length}
                        </Badge>
                    )}
                </Dropdown.Toggle>

                <Dropdown.Menu id="notification-menu" onClick={handleDropdownClick}>
                    {notifications.length > 0 ? (
                        <>
                            {notifications.map((notification) => (
                                <Dropdown.Item
                                    key={notification.notificationId}
                                    id="notification-item"
                                    onDragStart={(e) => e.preventDefault()}
                                    onClick={handleDropdownClick}
                                >
                                    <div className="notification-content">
                                        <div>
                                            <strong>{notification.message}</strong>
                                            <br />
                                            <small className="text-muted">
                                                ÏàòÏã†: {new Date(notification.createdAt).toLocaleString()}
                                            </small>
                                        </div>
                                        <div className="btn-container">
                                            <Button
                                                variant="danger"
                                                size="sm"
                                                onClick={() => handleDeleteNotification(notification.notificationId)}
                                            >
                                                ÏÇ≠Ï†ú
                                            </Button>
                                            <div onClick={goToMyReserve}>
                                                <Button id="btn-my" variant="info" size="sm">
                                                    ÎÇ¥ ÏòàÏïΩ Î≥¥Í∏∞
                                                </Button>
                                            </div>
                                        </div>
                                    </div>
                                </Dropdown.Item>
                            ))}
                            <div className="delete-all-container">
                                <Button
                                    size="sm"
                                    onClick={(e) => {
                                        e.stopPropagation();
                                        handleDeleteAllNotifications();
                                    }}
                                    id="btn-all-delete"
                                >
                                    Î™®Îì† ÏïåÎ¶º ÏÇ≠Ï†ú
                                </Button>
                            </div>
                        </>
                    ) : (
                        <Dropdown.Item disabled>ÏïåÎ¶ºÏù¥ ÏóÜÏäµÎãàÎã§.</Dropdown.Item>
                    )}
                </Dropdown.Menu>
            </Dropdown>
        </div>
    );
};

// Ïô∏Î∂ÄÏóêÏÑú ÏÇ¨Ïö©Ìï† Ïàò ÏûàÎèÑÎ°ù ÎÇ¥Î≥¥ÎÇ¥Í∏∞
export default Notification;
