import instance from "../../api/instance";
import { useEffect, useState } from "react";
import { Button, Card } from "react-bootstrap";
import { Link, useLocation } from "react-router-dom";
import "../../css/Style.css";
import { getUserInfo } from "../../hooks/userSlice";
import { useSelector } from "react-redux";

const StoreList = () => {
    const location = useLocation();
    // Í∞ÄÍ≤å Ï†ïÎ≥¥Î•º Ï†ÄÏû•ÌïòÍ∏∞ ÏúÑÌïú state ÏÑ†Ïñ∏
    const [storeData, setStoreData] = useState([]);
    // Ïπ¥ÌÖåÍ≥†Î¶¨ Ï†ïÎ≥¥ state
    const [categoryList, setCategoryList] = useState([]);

    // Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÉÅÌÉú Í¥ÄÎ¶¨
    const [selectedCategoryId, setSelectedCategoryId] = useState([]);

    // Í∞ÄÍ≤å Í≤ÄÏÉâ ÏÉÅÌÉú Í¥ÄÎ¶¨
    const [result, setResult] = useState(null);

    // Î°úÍ∑∏Ïù∏Îêú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥
    const userInfo = useSelector(getUserInfo);

    // Î∂ÅÎßàÌÅ¨ Ïó¨Î∂Ä
    const [isFavorite, setIsFavorite] = useState(false);

    // Í∞ÄÍ≤å Ï†ïÎ≥¥Î•º APIÎ°ú Î∞õÏïÑÏÑú stateÏóê Ï†ÄÏû•
    const getDefaultStoreList = () => {
        instance.get("/store/list").then((res) => {
        console.log(res.data);
        setStoreData(res.data);
        });
    };

    // Ïπ¥ÌÖåÍ≥†Î¶¨ Î¶¨Ïä§Ìä∏Î•º Í∞ÄÏ†∏ÏôÄ stateÏóê Ï†ÄÏû•
    const getCategoryList = () => {
        instance.get("/category/list").then((res) => {
        setCategoryList(res.data);
        });
    };

    // Ïπ¥ÌÖåÍ≥†Î¶¨ Î≤ÑÌäº ÌÅ¥Î¶≠ Ìï∏Îì§Îü¨
    const categoryClickHandler = (categoryId) => {
        setSelectedCategoryId(categoryId);
        instance
        .get(`/store/selectStoreByCategoryId?categoryId=${categoryId}`)
        .then((res) => {
            setStoreData(res.data);
        });
    };

    // Ï¶êÍ≤®Ï∞æÍ∏∞ Îì±Î°ù Î≤ÑÌäº ÌÅ¥Î¶≠ Ìï∏Îì§Îü¨
    const favoriteClickHandler = (storeId) => {
        instance.post(`/favorite/insertFavorite`, {
            userId: userInfo.username,
            storeId: storeId,
        }).then(() => {
            // Ï¶êÍ≤®Ï∞æÍ∏∞ Îì±Î°ù ÌõÑ UIÏóê Î∞òÏòÅ
            setIsFavorite((prevFavorites) => ({
                ...prevFavorites,
                [storeId]: true, // Ìï¥Îãπ storeIdÎ•º Ï¶êÍ≤®Ï∞æÍ∏∞ ÏÉÅÌÉúÎ°ú ÏÑ§Ï†ï
            }));
        });
    };


    // Ï¶êÍ≤®Ï∞æÍ∏∞ Ï∑®ÏÜå Î≤ÑÌäº ÌÅ¥Î¶≠ Ìï∏Îì§Îü¨
    const favoriteCancelClickHandler = (storeId) => {
        //  /api/favorite/deleteFavoriteByIdÎ°ú ÏÇ≠Ï†ú
        instance.post(`/favorite/checkFavoriteByUserStore`,{
            userId: userInfo.username,
            storeId: storeId,
        }).then((res)=> {
            console.log(res.data);
            instance.delete(`/favorite/deleteFavoriteById?favoriteId=${res.data}`)
            .then(() => {
                // Ï¶êÍ≤®Ï∞æÍ∏∞ Ï∑®ÏÜå ÌõÑ UIÏóê Î∞òÏòÅ
                setIsFavorite((prevFavorites) => ({
                    ...prevFavorites,
                    [storeId]: false, // Ìï¥Îãπ storeIdÎ•º Ï¶êÍ≤®Ï∞æÍ∏∞ Ï∑®ÏÜå ÏÉÅÌÉúÎ°ú ÏÑ§Ï†ï
                }));
            });
        })
    };

    // Ï¶êÍ≤®Ï∞æÍ∏∞ Ïó¨Î∂Ä 
    const checkFavorite = (storeId) => {
        instance.post(`/favorite/checkFavoriteByUserStore`,{
                userId: userInfo.username,
                storeId: storeId,
            }
        ).then((res)=> {
            // Ï¶êÍ≤®Ï∞æÍ∏∞ Ïó¨Î∂ÄÏóê Îî∞Îùº ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
            setIsFavorite((prevFavorites) => ({
                ...prevFavorites,
                [storeId]: res.data, // ÏÑúÎ≤ÑÏùò ÏùëÎãµÏóê Îî∞Îùº true/false Ï†ÄÏû•
            }));
        })

    }

    useEffect(() => {
        setResult(null);

        // `state`Î°ú Ï†ÑÎã¨Îêú Í≤∞Í≥ºÍ∞Ä ÏûàÎã§Î©¥ ÏÉÅÌÉúÎ•º ÏÑ§Ï†ï
        if (location.state?.result) {
        setResult(location.state.result);
        }
    }, [location.state]); // location.stateÍ∞Ä Î≥ÄÍ≤ΩÎê† ÎïåÎßàÎã§ Ïã§Ìñâ

    useEffect(() => {
        // ÌéòÏù¥ÏßÄ ÏÉàÎ°úÍ≥†Ïπ® Ïãú ÏÉÅÌÉúÎ•º Ï¥àÍ∏∞ÌôîÌïòÍ≥†, Ïù¥Ï†Ñ ÏÉÅÌÉúÎ•º Ïú†ÏßÄÌïòÏßÄ ÏïäÎèÑÎ°ù Ï≤òÎ¶¨
        setResult(null);
        getCategoryList();
        getDefaultStoreList();
    }, []); // Îπà Î∞∞Ïó¥Î°ú ÌïúÎ≤àÎßå Ïã§Ìñâ

    // Ïπ¥ÌÖåÍ≥†Î¶¨Í∞Ä Î≥ÄÍ≤ΩÎê†Îïå
    useEffect(() => {
        if (selectedCategoryId.length === 0) {
            getDefaultStoreList();
        }
    }, [selectedCategoryId]);

    useEffect(() => {
        if (result) {
            setStoreData(result);
        }
    }, [result]); // resultÍ∞Ä Î≥ÄÍ≤ΩÎê†ÎïåÎßàÎã§ Ïã§Ìñâ

        // storeDataÍ∞Ä Î≥ÄÍ≤ΩÎê† ÎïåÎßàÎã§ checkFavorite Ìò∏Ï∂ú
        useEffect(() => {
            storeData.forEach(item => {
                checkFavorite(item.storeId);  // Í∞Å storeIdÏóê ÎåÄÌï¥ Ï¶êÍ≤®Ï∞æÍ∏∞ Ïó¨Î∂Ä ÌôïÏù∏
            });
        }, [storeData]);

    return (
        <div>
        <h4>Ïπ¥ÌÖåÍ≥†Î¶¨</h4>
        <button onClick={() => getDefaultStoreList()}>Ï†ÑÏ≤¥</button>
        {categoryList.map((item) => (
            <button
            key={item.categoryId}
            onClick={() => categoryClickHandler(item.categoryId)}
            >
            {item.categoryTitle}
            </button>
        ))}
        <h4>==========Í∞ÄÍ≤å Ï†ïÎ≥¥ Î¶¨Ïä§Ìä∏==========</h4>
        <ul>
            {storeData.map((item) => {

            return (
                <li key={item.storeId}>
                <Card style={{ width: "18rem" }}>
                    <Card.Body>
                    <Link to={"/store/info"} state={item.storeId}>
                        <Card.Img
                        variant="top"
                        src={`${process.env.REACT_APP_HOST}/file/view/${item.saveFileName}`}
                        />
                        <Card.Title>{item.storeName}</Card.Title>
                        <Card.Text>‚≠ê4.5 (Identity)</Card.Text>
                    </Link>
                    {/* isFavorite = trueÎ©¥ Î≤ÑÌäº Îã§Î•¥Í≤å */}
                    {isFavorite[item.storeId] ? (
                        <Button
                        onClick={() => favoriteCancelClickHandler(item.storeId)}
                        >
                        X
                        </Button>
                    ) : (
                        <Button onClick={() => favoriteClickHandler(item.storeId)}>
                        üîñ
                        </Button>
                    )}
                    </Card.Body>
                </Card>
                </li>
            );
            })}
        </ul>
        <h4>===============================</h4>
        </div>
    );
};

export default StoreList;
